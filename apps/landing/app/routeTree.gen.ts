/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PricingImport } from './routes/pricing'
import { Route as DownloadImport } from './routes/download'
import { Route as IndexImport } from './routes/index'
import { Route as CheckoutSuccessImport } from './routes/checkout/success'
import { Route as legalTermsImport } from './routes/(legal)/terms'
import { Route as legalRefundsImport } from './routes/(legal)/refunds'
import { Route as legalPrivacyImport } from './routes/(legal)/privacy'
import { Route as legalImprintImport } from './routes/(legal)/imprint'

// Create/Update Routes

const PricingRoute = PricingImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any)

const DownloadRoute = DownloadImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutSuccessRoute = CheckoutSuccessImport.update({
  id: '/checkout/success',
  path: '/checkout/success',
  getParentRoute: () => rootRoute,
} as any)

const legalTermsRoute = legalTermsImport.update({
  id: '/(legal)/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const legalRefundsRoute = legalRefundsImport.update({
  id: '/(legal)/refunds',
  path: '/refunds',
  getParentRoute: () => rootRoute,
} as any)

const legalPrivacyRoute = legalPrivacyImport.update({
  id: '/(legal)/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const legalImprintRoute = legalImprintImport.update({
  id: '/(legal)/imprint',
  path: '/imprint',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/download': {
      id: '/download'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof DownloadImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingImport
      parentRoute: typeof rootRoute
    }
    '/(legal)/imprint': {
      id: '/(legal)/imprint'
      path: '/imprint'
      fullPath: '/imprint'
      preLoaderRoute: typeof legalImprintImport
      parentRoute: typeof rootRoute
    }
    '/(legal)/privacy': {
      id: '/(legal)/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof legalPrivacyImport
      parentRoute: typeof rootRoute
    }
    '/(legal)/refunds': {
      id: '/(legal)/refunds'
      path: '/refunds'
      fullPath: '/refunds'
      preLoaderRoute: typeof legalRefundsImport
      parentRoute: typeof rootRoute
    }
    '/(legal)/terms': {
      id: '/(legal)/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof legalTermsImport
      parentRoute: typeof rootRoute
    }
    '/checkout/success': {
      id: '/checkout/success'
      path: '/checkout/success'
      fullPath: '/checkout/success'
      preLoaderRoute: typeof CheckoutSuccessImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/pricing': typeof PricingRoute
  '/imprint': typeof legalImprintRoute
  '/privacy': typeof legalPrivacyRoute
  '/refunds': typeof legalRefundsRoute
  '/terms': typeof legalTermsRoute
  '/checkout/success': typeof CheckoutSuccessRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/pricing': typeof PricingRoute
  '/imprint': typeof legalImprintRoute
  '/privacy': typeof legalPrivacyRoute
  '/refunds': typeof legalRefundsRoute
  '/terms': typeof legalTermsRoute
  '/checkout/success': typeof CheckoutSuccessRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/pricing': typeof PricingRoute
  '/(legal)/imprint': typeof legalImprintRoute
  '/(legal)/privacy': typeof legalPrivacyRoute
  '/(legal)/refunds': typeof legalRefundsRoute
  '/(legal)/terms': typeof legalTermsRoute
  '/checkout/success': typeof CheckoutSuccessRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/download'
    | '/pricing'
    | '/imprint'
    | '/privacy'
    | '/refunds'
    | '/terms'
    | '/checkout/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/download'
    | '/pricing'
    | '/imprint'
    | '/privacy'
    | '/refunds'
    | '/terms'
    | '/checkout/success'
  id:
    | '__root__'
    | '/'
    | '/download'
    | '/pricing'
    | '/(legal)/imprint'
    | '/(legal)/privacy'
    | '/(legal)/refunds'
    | '/(legal)/terms'
    | '/checkout/success'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DownloadRoute: typeof DownloadRoute
  PricingRoute: typeof PricingRoute
  legalImprintRoute: typeof legalImprintRoute
  legalPrivacyRoute: typeof legalPrivacyRoute
  legalRefundsRoute: typeof legalRefundsRoute
  legalTermsRoute: typeof legalTermsRoute
  CheckoutSuccessRoute: typeof CheckoutSuccessRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DownloadRoute: DownloadRoute,
  PricingRoute: PricingRoute,
  legalImprintRoute: legalImprintRoute,
  legalPrivacyRoute: legalPrivacyRoute,
  legalRefundsRoute: legalRefundsRoute,
  legalTermsRoute: legalTermsRoute,
  CheckoutSuccessRoute: CheckoutSuccessRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/download",
        "/pricing",
        "/(legal)/imprint",
        "/(legal)/privacy",
        "/(legal)/refunds",
        "/(legal)/terms",
        "/checkout/success"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/download": {
      "filePath": "download.tsx"
    },
    "/pricing": {
      "filePath": "pricing.tsx"
    },
    "/(legal)/imprint": {
      "filePath": "(legal)/imprint.tsx"
    },
    "/(legal)/privacy": {
      "filePath": "(legal)/privacy.tsx"
    },
    "/(legal)/refunds": {
      "filePath": "(legal)/refunds.tsx"
    },
    "/(legal)/terms": {
      "filePath": "(legal)/terms.tsx"
    },
    "/checkout/success": {
      "filePath": "checkout/success.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

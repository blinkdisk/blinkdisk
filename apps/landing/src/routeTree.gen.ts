/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as DownloadRouteImport } from './routes/download'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CheckoutSuccessRouteImport } from './routes/checkout/success'
import { Route as toolsCodeRouteImport } from './routes/(tools)/code'
import { Route as legalTermsRouteImport } from './routes/(legal)/terms'
import { Route as legalRefundsRouteImport } from './routes/(legal)/refunds'
import { Route as legalPrivacyRouteImport } from './routes/(legal)/privacy'
import { Route as legalImprintRouteImport } from './routes/(legal)/imprint'

const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadRoute = DownloadRouteImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutSuccessRoute = CheckoutSuccessRouteImport.update({
  id: '/checkout/success',
  path: '/checkout/success',
  getParentRoute: () => rootRouteImport,
} as any)
const toolsCodeRoute = toolsCodeRouteImport.update({
  id: '/(tools)/code',
  path: '/code',
  getParentRoute: () => rootRouteImport,
} as any)
const legalTermsRoute = legalTermsRouteImport.update({
  id: '/(legal)/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const legalRefundsRoute = legalRefundsRouteImport.update({
  id: '/(legal)/refunds',
  path: '/refunds',
  getParentRoute: () => rootRouteImport,
} as any)
const legalPrivacyRoute = legalPrivacyRouteImport.update({
  id: '/(legal)/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const legalImprintRoute = legalImprintRouteImport.update({
  id: '/(legal)/imprint',
  path: '/imprint',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/pricing': typeof PricingRoute
  '/imprint': typeof legalImprintRoute
  '/privacy': typeof legalPrivacyRoute
  '/refunds': typeof legalRefundsRoute
  '/terms': typeof legalTermsRoute
  '/code': typeof toolsCodeRoute
  '/checkout/success': typeof CheckoutSuccessRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/pricing': typeof PricingRoute
  '/imprint': typeof legalImprintRoute
  '/privacy': typeof legalPrivacyRoute
  '/refunds': typeof legalRefundsRoute
  '/terms': typeof legalTermsRoute
  '/code': typeof toolsCodeRoute
  '/checkout/success': typeof CheckoutSuccessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/download': typeof DownloadRoute
  '/pricing': typeof PricingRoute
  '/(legal)/imprint': typeof legalImprintRoute
  '/(legal)/privacy': typeof legalPrivacyRoute
  '/(legal)/refunds': typeof legalRefundsRoute
  '/(legal)/terms': typeof legalTermsRoute
  '/(tools)/code': typeof toolsCodeRoute
  '/checkout/success': typeof CheckoutSuccessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/download'
    | '/pricing'
    | '/imprint'
    | '/privacy'
    | '/refunds'
    | '/terms'
    | '/code'
    | '/checkout/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/download'
    | '/pricing'
    | '/imprint'
    | '/privacy'
    | '/refunds'
    | '/terms'
    | '/code'
    | '/checkout/success'
  id:
    | '__root__'
    | '/'
    | '/download'
    | '/pricing'
    | '/(legal)/imprint'
    | '/(legal)/privacy'
    | '/(legal)/refunds'
    | '/(legal)/terms'
    | '/(tools)/code'
    | '/checkout/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DownloadRoute: typeof DownloadRoute
  PricingRoute: typeof PricingRoute
  legalImprintRoute: typeof legalImprintRoute
  legalPrivacyRoute: typeof legalPrivacyRoute
  legalRefundsRoute: typeof legalRefundsRoute
  legalTermsRoute: typeof legalTermsRoute
  toolsCodeRoute: typeof toolsCodeRoute
  CheckoutSuccessRoute: typeof CheckoutSuccessRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download': {
      id: '/download'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof DownloadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout/success': {
      id: '/checkout/success'
      path: '/checkout/success'
      fullPath: '/checkout/success'
      preLoaderRoute: typeof CheckoutSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tools)/code': {
      id: '/(tools)/code'
      path: '/code'
      fullPath: '/code'
      preLoaderRoute: typeof toolsCodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(legal)/terms': {
      id: '/(legal)/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof legalTermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(legal)/refunds': {
      id: '/(legal)/refunds'
      path: '/refunds'
      fullPath: '/refunds'
      preLoaderRoute: typeof legalRefundsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(legal)/privacy': {
      id: '/(legal)/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof legalPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(legal)/imprint': {
      id: '/(legal)/imprint'
      path: '/imprint'
      fullPath: '/imprint'
      preLoaderRoute: typeof legalImprintRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DownloadRoute: DownloadRoute,
  PricingRoute: PricingRoute,
  legalImprintRoute: legalImprintRoute,
  legalPrivacyRoute: legalPrivacyRoute,
  legalRefundsRoute: legalRefundsRoute,
  legalTermsRoute: legalTermsRoute,
  toolsCodeRoute: toolsCodeRoute,
  CheckoutSuccessRoute: CheckoutSuccessRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
